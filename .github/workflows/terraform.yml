# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

# Push trigger
on:
  push:
    branches:
    - main
    paths:
    - 'AzureDevops-CICD-SQL/**'
    - '.github/workflows/terraform.yml'
  pull_request:
    branches:
    - main
    paths:
    - 'AzureDevops-CICD-SQL/**'
    - '.github/workflows/terraform.yml'
  workflow_dispatch:

jobs:
  deploy-development:
    name: 'development'
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: AzureDevops-CICD-SQL
      
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform deployment
      run: |
        export ARM_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
        export ARM_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
        export ARM_SUBSCRIPTION_ID="e4b1e845-6055-48ca-a385-b3491f5772fd"
        export ARM_TENANT_ID="ba6b2e3c-7421-4e93-b60e-d3f39eee52d5"

        terraform init -backend-config="configuration/backend.dev.conf"
        terraform plan -var="environment=dev" -var="password=${{ secrets.AZURE_DB_PASSWORD_DEV }}"

  deploy-production:
    name: 'production'
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-development]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: AzureDevops-CICD-SQL
      
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform deployment
      run: |
        export ARM_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
        export ARM_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
        export ARM_SUBSCRIPTION_ID="e4b1e845-6055-48ca-a385-b3491f5772fd"
        export ARM_TENANT_ID="ba6b2e3c-7421-4e93-b60e-d3f39eee52d5"

        terraform init -backend-config="configuration/backend.prd.conf"
        terraform plan -var="environment=prd" -var="password=${{ secrets.AZURE_DB_PASSWORD_PRD }}"

    #  run: terraform apply -auto-approve
